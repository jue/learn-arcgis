import{d0 as $,d4 as w,d2 as I,d3 as T,d5 as O,d1 as E,ax as M,dl as v,bd as g,dt as R,du as j,_ as f,aD as F,dv as L,dw as P,M as b,b as J,f as a,g as n,dx as x,aW as N,aO as U,d8 as q,j as _,dy as A,de as k}from"./index-a1640f7c.js";import{i as V}from"./scaleUtils-a6dc33a1.js";import{i as z}from"./APIKeyMixin-8c8312ea.js";import{E as D,f as W,X as Z}from"./SublayersOwner-850690d5.js";import{l as B}from"./ArcGISService-8805b728.js";import{o as C}from"./CustomParametersMixin-26786ba8.js";import{a as G}from"./TemporalLayer-2269a361.js";import{m as H}from"./ExportImageParameters-8310fc4e.js";import{e as S}from"./sublayerUtils-12e482f6.js";import{e as K}from"./versionUtils-4cca9a97.js";import"./index-40e4af68.js";import"./QueryTask-5c09adfd.js";import"./Query-668f1052.js";import"./executeForIds-b8e18d59.js";import"./query-3c5fc440.js";import"./pbfQueryUtils-a447e2f5.js";import"./pbf-d889bed1.js";import"./OptimizedGeometry-d94e541f.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./queryZScale-3be6edef.js";import"./executeQueryJSON-52a7ae9b.js";import"./executeQueryPBF-bf194d09.js";import"./featureConversionUtils-cd7cbc25.js";import"./FeatureType-c2071a01.js";import"./FeatureTemplate-65031d27.js";import"./LabelClass-124e90a0.js";import"./labelUtils-0b258658.js";import"./defaultsJSON-b087dd4d.js";import"./labelingInfo-363cd920.js";import"./LayerFloorInfo-010da306.js";import"./serviceCapabilitiesUtils-5631e482.js";import"./AttachmentQuery-8b2738cb.js";import"./popupUtils-fc82acc8.js";import"./floorFilterUtils-080a7cd2.js";let s=class extends $(G(w(D(W(B(I(T(O(E(z(C(k)))))))))))){constructor(...e){super(...e),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,i){return typeof e=="string"?{url:e,...i}:e}load(e){const i=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(M).then(()=>this._fetchService(i))),Promise.resolve(this)}readImageFormat(e,i){const l=i.supportedImageFormatTypes;return l&&l.includes("PNG32")?"png32":"png24"}writeSublayers(e,i,l,t){var h;if(!this.loaded||!e)return;const o=e.slice().reverse().flatten(({sublayers:r})=>r&&r.toArray().reverse()).toArray();let p=!1;if(this.capabilities&&this.capabilities.operations.supportsExportMap&&((h=this.capabilities.exportMap)!=null&&h.supportsDynamicLayers)){const r=v(t.origin);if(r===g.PORTAL_ITEM){const d=this.createSublayersForOrigin("service").sublayers;p=S(o,d,g.SERVICE)}else if(r>g.PORTAL_ITEM){const d=this.createSublayersForOrigin("portal-item");p=S(o,d.sublayers,v(d.origin))}}const m=[],y={writeSublayerStructure:p,...t};let c=p;o.forEach(r=>{const d=r.write({},y);m.push(d),c=c||r.originOf("visible")==="user"}),m.some(r=>Object.keys(r).length>1)&&(i.layers=m),c&&(i.visibleLayers=o.filter(r=>r.visible).map(r=>r.id))}createExportImageParameters(e,i,l,t){const o=(t==null?void 0:t.pixelRatio)||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const p=new H({layer:this,floors:t==null?void 0:t.floors,scale:V({extent:e,width:i})*o}),m=p.toJSON();p.destroy();const y=!(t!=null&&t.rotation)||this.version<10.3?{}:{rotation:-t.rotation},c=e==null?void 0:e.spatialReference,h=R(c);m.dpi*=o;const r={};if(t!=null&&t.timeExtent){const{start:d,end:u}=t.timeExtent.toJSON();r.time=d&&u&&d===u?""+d:`${d??"null"},${u??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(r.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:h,imageSR:h,size:i+","+l,...m,...y,...r}}async fetchImage(e,i,l,t){const{data:o}=await this._fetchImage("image",e,i,l,t);return o}async fetchImageBitmap(e,i,l,t){const{data:o,url:p}=await this._fetchImage("blob",e,i,l,t);return j(o,p,t==null?void 0:t.signal)}async fetchRecomputedExtents(e={}){const i={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:l}=await f(this.url,i),{extent:t,fullExtent:o,timeExtent:p}=l,m=t||o;return{fullExtent:m&&F.fromJSON(m),timeExtent:p&&L.fromJSON({start:p[0],end:p[1]})}}loadAll(){return P(this,e=>{e(this.allSublayers)})}serviceSupportsSpatialReference(e){return K(this,e)}async _fetchImage(e,i,l,t,o){var y,c,h;const p={responseType:e,signal:(o==null?void 0:o.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(i,l,t,o),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},m=this.parsedUrl.path+"/export";if(((y=p.query)==null?void 0:y.dynamicLayers)!=null&&!((h=(c=this.capabilities)==null?void 0:c.exportMap)!=null&&h.supportsDynamicLayers))throw new b("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:p.query});try{const{data:r}=await f(m,p);return{data:r,url:m}}catch(r){throw J(r)?r:new b("mapimagelayer:image-fetch-error",`Unable to load image: ${m}`,{error:r})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:i,ssl:l}=await f(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});l&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=i,this.read(i,{origin:"service",url:this.parsedUrl})}};a([n(x("dateFieldsTimeReference"))],s.prototype,"dateFieldsTimeZone",void 0),a([n({type:Boolean})],s.prototype,"datesInUnknownTimezone",void 0),a([n()],s.prototype,"dpi",void 0),a([n()],s.prototype,"gdbVersion",void 0),a([n()],s.prototype,"imageFormat",void 0),a([N("imageFormat",["supportedImageFormatTypes"])],s.prototype,"readImageFormat",null),a([n({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],s.prototype,"imageMaxHeight",void 0),a([n({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],s.prototype,"imageMaxWidth",void 0),a([n()],s.prototype,"imageTransparency",void 0),a([n({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],s.prototype,"isReference",void 0),a([n({json:{read:!1,write:!1}})],s.prototype,"labelsVisible",void 0),a([n({type:["ArcGISMapServiceLayer"]})],s.prototype,"operationalLayerType",void 0),a([n({json:{read:!1,write:!1}})],s.prototype,"popupEnabled",void 0),a([n(x("preferredTimeReference"))],s.prototype,"preferredTimeZone",void 0),a([n()],s.prototype,"sourceJSON",void 0),a([n({json:{write:{ignoreOrigin:!0}}})],s.prototype,"sublayers",void 0),a([U("sublayers",{layers:{type:[Z]},visibleLayers:{type:[A]}})],s.prototype,"writeSublayers",null),a([n({type:["show","hide","hide-children"]})],s.prototype,"listMode",void 0),a([n({json:{read:!1},readOnly:!0,value:"map-image"})],s.prototype,"type",void 0),a([n(q)],s.prototype,"url",void 0),s=a([_("esri.layers.MapImageLayer")],s);const Fe=s;export{Fe as default};
